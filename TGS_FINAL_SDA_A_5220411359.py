# -*- coding: utf-8 -*-
"""TGS_FINAL_SDA_A_5220411359

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O0EaE4XSNzXWmchjR6n8_bjpypyiZazq
"""

from IPython.display import Javascript
display(Javascript('''google.colab.output.setIframeHeight(0, true, {maxHeight: 5000})'''))

import os
from prettytable import PrettyTable
import datetime
now=datetime.datetime.now()
hari = now.strftime("%A")

# Kelas barang untuk menyimpan data 
class barang:
    def __init__(self, sku, nama, harga, jumlah):
        self.sku = sku
        self.nama = nama
        self.harga = harga
        self.jumlah = jumlah
        self.left = None
        self.right = None

# class BST untuk mengelola operasi
class BST:
    def __init__(self):
        self.root = None
    
    # Fungsi untuk memasukkan data stok barang ke dalam BST
    def insert(self, sku, nama, harga, jumlah):
        new_barang = barang(sku, nama, harga, jumlah)
        if self.root is None:
            self.root = new_barang
        else:
            temp = self.root
            while True:
                if sku == temp.sku:
                    print("Input ditolak, silahkan input no. SKU yang berbeda!.")
                    print("-".center(80, "-"))
                    return
                elif sku <= temp.sku:
                    if temp.left is None:
                        temp.left = new_barang
                        break
                    temp = temp.left
                else:
                    if temp.right is None:
                        temp.right = new_barang
                        break
                    temp = temp.right
        print("Data stok barang berhasil disimpan.")
        print("-".center(80, "-"))
    
    # Fungsi untuk mencari barang dengan No. SKU tertentu di dalam BST
    def contains(self, sku):
        temp = self.root
        while temp is not None:
            if sku == temp.sku:
                return temp
            elif sku < temp.sku:
                temp = temp.left
            else:
                temp = temp.right
        return None
    
    def get_stok_sku(self, sku):
        barang = self.contains(sku)
        if barang is not None:
            return barang.jumlah
        else:
            return None
    
    # Fungsi untuk melakukan restok barang berdasarkan No. SKU
    def restok(self, sku, jumlah_baru):
        barang = self.contains(sku)
        if barang is not None:
            barang.jumlah = jumlah_baru
            print("-".center(80, "-"))
            print("Restok barang berhasil.")
            print("-".center(80, "-"))
        else:
            print("No. SKU belum terdaftar")

    # Fungsi untuk membuat pretty tabel
    def get_stok_table(self):
        table = PrettyTable()
        table.field_names = ["No. SKU", "Nama Barang", "Harga Satuan", "Jumlah Stok"]
        self._get_stok_data(self.root, table)
        return table
    
    def _get_stok_data(self, barang, table):
        if barang is not None:
            self._get_stok_data(barang.left, table)
            table.add_row([barang.sku, barang.nama, barang.harga, barang.jumlah])
            self._get_stok_data(barang.right, table)

# Struktur data untuk menyimpan data transaksi konsumen
class transaksi:
    def __init__(self, nama_konsumen, sku, jumlah_beli, subtotal, stok_barang):
        self.nama_konsumen = nama_konsumen
        self.sku = sku
        self.jumlah_beli = jumlah_beli
        self.subtotal = subtotal
        self.stok_barang = stok_barang

# Fungsi Quick Sort untuk mengurutkan nilai subtotal dari yang terbesar hingga terkecil
def swap(transaksi_list, index1, index2):
    temp = transaksi_list[index1]
    transaksi_list[index1] = transaksi_list[index2]
    transaksi_list[index2] = temp

def pivot(transaksi_list, pivot_index, end_index):
    swap_index = pivot_index

    for i in range(pivot_index + 1, end_index + 1):
        if transaksi_list[i].subtotal > transaksi_list[pivot_index].subtotal:
            swap_index += 1
            swap(transaksi_list, swap_index, i)
    swap(transaksi_list, pivot_index, swap_index)
    return swap_index

def quick_sort_helper(transaksi_list, left, right):
    if left < right:
        pivot_index = pivot(transaksi_list, left, right)
        quick_sort_helper(transaksi_list, left, pivot_index - 1)
        quick_sort_helper(transaksi_list, pivot_index + 1, right)

def quick_sort(transaksi_list):
    quick_sort_helper(transaksi_list, 0, len(transaksi_list) - 1)

# List untuk menyimpan data transaksi konsumen
transaksi_list = []
stok_bst = BST()

# Fungsi untuk mengecek jumlah digit No. SKU (harus 4)
def Cek4Sku(n):    
    while len(str(n)) != 4:
        print("-" * 80)
        print("Input harus terdiri dari 4 digit.")
        print("-" * 80)
        os.system('pause')
        os.system('cls')
        print("Data Stok Barang".center(80, "-"))
        n = int(input("Masukan No. SKU        : "))
    return n

# Fungsi untuk menampilkan Menu Utama
def menu_utama():
    os.system('cls')
    print("-".center(80, "-"))
    print(" SISTEM INFORMASI STOK DAN TRANSAKSI ".center(80, "="))
    print("-".center(80, "-"))
    print(" SITORSI ".center(80, "="))
    print("-".center(80, "-"))
    print(" MENU UTAMA ".center(80, "-"))
    print("-".center(80, "-"))
    print("\n1) Kelola Stok Barang")
    print("2) Kelola Transaksi Konsumen")
    print("0) Exit Program\n")
    print("-".center(80, "-"))

# Fungsi untuk menampilkan menu sub kelola stok barang
def menu_stok():
    os.system("cls")
    print(" SUB MENU KELOLA STOK BARANG ".center(80, "-"))
    print("\n1.1) Input Data Stok Barang")
    print("1.2) Restok Barang")
    print("1.3) Data Stok Barang")
    print("0) Kembali ke Menu Utama\n")
    print("-".center(80, "-"))

# Fungsi untuk menampilkan menu sub stok barang
def menu_tampil(stok_bst):
    os.system("cls")
    print(" SUB MENU DATA STOK BARANG".center(80, "-"))
    print("1) Lihat Seluruh Data Stok Barang")
    print("2) Lihat Data Stok Barang Berdasarkan No.SKU")
    print("0) Kembali ke Sub Menu Kelola Stok")
    print("-".center(80, "-"))
    pilihan = input('Pilih Menu : ')
    if pilihan == "1":
        tampil_stok(stok_bst)
    elif pilihan == "2":
        tampil_stok_pilih(stok_bst)
    elif pilihan == "0":
        menu_stok()
    else:
        print("Pilihan Tidak Valid.")

# Fungsi untuk menampilkan menu sub kelola transaksi konsumen
def menu_transaksi():
    os.system("cls")
    print(" SUB MENU KELOLA TRANSAKSI KONSUMEN ".center(80, "-"))
    print("\n2.1) Input Data Transaksi Baru")
    print("2.2) Lihat Data Seluruh Transaksi Konsumen")
    print("2.3) Lihat Data Transaksi Berdasarkan Subtotal")
    print("0) Kembali ke Menu Utama\n")
    print("-".center(80, "-"))

# Fungsi untuk input data stok barang
def input_stok(stok_bst):
    os.system("cls")
    pilihan = "y"
    while pilihan == 'y' or pilihan == "Y":
        print("Data Stok Barang".center(80, "-"))
        sku = int(input("\nMasukkan No. SKU       : "))
        sku = Cek4Sku(sku)
        if sku is not None:
            nama = input("Masukkan Nama Barang   : ")
            harga = float(input("Masukkan Harga Satuan  : "))
            jumlah = int(input("Masukkan Jumlah Stok   : "))
            print("-".center(80, "-"))
            stok_bst.insert(sku, nama, harga, jumlah)
        pilihan = input("Ingin Menambahkan Data Lagi? <Y/N?> : ")
    menu_stok()

# Fungsi untuk melakukan restok barang
def input_restok(stok_bst):
    os.system("cls")
    print("\n")
    print("Data Restok Barang".center(80, "-"))
    sku = int(input("\nMasukkan No. SKU Barang Yang Akan Di Restok  : "))
    barang = stok_bst.contains(sku)
    if barang is None:
        print("-".center(80, "-"))
        print("No. SKU Yang Diinputkan Belum Terdaftar")
        print("Silahkan Input Datanya Terlebih Dahulu Pada Sub Menu Input Data Stok Barang!")
        print("-".center(80, "-"))
        pilihan = input('Apakah Ingin Melakukan Input Data Stok Barang? <Y/N> : ')
        if pilihan == "y" or pilihan == "Y":
            input_stok(stok_bst)
        else:
            return
    else:
        jumlah_lama = stok_bst.get_stok_sku(sku)
        jumlah_baru = int(input("Masukkan Jumlah Stok Baru                    : "))
        stok_bst.restok(sku, (jumlah_lama + jumlah_baru))
        pilihan = input('Apakah Ingin Melakukan Restok Lagi? <Y/N> : ')
        if pilihan == "y" or pilihan == "Y":
            input_restok(stok_bst)
        else:
            return 
    menu_stok()

# Fungsi untuk menampilkan seluruh stok barang menggunakan tabel
def tampil_stok(stok_bst):
    os.system("cls")
    print(" DATA Stok BARANG ".center(80, "-"))
    stok_table = stok_bst.get_stok_table()
    print(stok_table)
    print("-".center(80, "-"))
    input("Tekan Enter untuk kembali ke Sub Menu Kelola Stok Barang")

# Fungsi untuk menampilkan stok barang berdasarkan no. SKU
def tampil_stok_pilih(stok_bst):
    os.system("cls")
    print(" DATA Stok BARANG ".center(80, "-"))
    sku = int(input("\nMasukkan nomor SKU barang yang ingin ditampilkan : "))
    stok_barang = stok_bst.get_stok_sku(sku)

    if stok_barang is not None:
        print("-".center(80, "-"))
        print("Stok Barang : ",stok_barang)
        print("-".center(80, "-"))
    else:
        print("-".center(80, "-"))
        print("Barang dengan nomor SKU tersebut tidak ditemukan!")
        print("-".center(80, "-"))
    input("Tekan Enter Untuk Kembali Ke Sub Menu Kelola Stok Barang")

# Fungsi untuk input data transaksi konsumen
def input_transaksi(stok_bst):
    os.system("cls")
    print("Input Data Transaksi Konsumen".center(80, "-"))
    nama_konsumen = input("\nNama Konsumen              : ")
    while True:
        sku = int(input("Masukkan No. SKU Barang    : "))
        barang = stok_bst.contains(sku)
        if barang is None:
            print("-".center(80, "-"))
            print("No. SKU Yang Diinputkan Belum Terdaftar")
            pilihan = input("Apakah Ingin Melanjutkan Transaksi? (Y/N) : ")
            print("-".center(80, "-"))
            if pilihan == "n" or pilihan == "N":
                break
        else:
            jumlah_beli = int(input("Masukkan Jumlah Beli       : "))
            if barang.jumlah >= jumlah_beli:
                barang.jumlah -= jumlah_beli
                subtotal = barang.harga * jumlah_beli
                transaksi_list.append(transaksi(nama_konsumen, sku, jumlah_beli, subtotal, barang.jumlah))
                print("-".center(80, "-"))
                print("Data Transaksi Konsumen Berhasil Diinputkan")
                pilihan = input("Apakah Ingin Menambahkan Data Pembelian Untuk Konsumen Ini? (Y/N) : ")
                print("-".center(80, "-"))
                if pilihan == "n" or pilihan == "N":
                    break
            elif barang.jumlah < jumlah_beli:
                print("-".center(80, "-"))
                print("Jumlah Stok No. SKU Yang Anda Beli Tidak Mencukupi")
                pilihan = input("Apakah Ingin Melanjutkan Transaksi? (Y/N): ")
                print("-".center(80, "-"))
                if pilihan == "n" or pilihan == "N":
                    break

# Fungsi untuk menampilkan data seluruh transaksi konsumen
def data_transaksi():
    os.system("cls")
    print("-".center(80, "-"))
    print(" Data Seluruh Transaksi Konsumen ".center(80, "="))
    print("-".center(80, "-"))
    if len(transaksi_list) == 0:
        print("-".center(80, "-"))
        print("Belum Ada Data Transaksi Konsumen.")
        print("-".center(80, "-"))
    else:
        print("\nRiwayat Transaksi")
        print("Hari/Tanggal :",hari,",",now)
        table = PrettyTable()
        table.field_names = ["Nama Konsumen", "No. SKU Barang", "Jumlah Beli", "Subtotal"]
        
        for transaksi in transaksi_list:
            table.add_row([transaksi.nama_konsumen, transaksi.sku, transaksi.jumlah_beli, transaksi.subtotal])
        
        print(table)
    print("-".center(80, "-"))
    input("Tekan Enter Untuk Kembali ke Sub Menu Kelola Transaksi Konsumen")

# Funsgi untuk menampilkan data transaksi berdasarkan subtotal
def transaksi_subtotal():
    os.system("cls")
    print("-".center(80, "-"))
    print(" Data Transaksi Berdasarkan Subtotal ".center(80, "="))
    print("-".center(80, "-"))
    if len(transaksi_list) == 0:
        print("-".center(80, "-"))
        print("Belum Ada Data Transaksi Konsumen.")
        print("-".center(80, "-"))
    else:
        print("\nRiwayat Transaksi")
        print("Tanggal : ", hari, now)
        quick_sort(transaksi_list)

        table = PrettyTable()
        table.field_names = ["Nama Konsumen", "No. SKU Barang", "Jumlah Beli", "Subtotal"]

        for transaksi in transaksi_list:
            table.add_row([transaksi.nama_konsumen, transaksi.sku, transaksi.jumlah_beli, transaksi.subtotal])

        print(table)
    print("-".center(80, "-"))
    input("Tekan Enter Untuk Kembali Ke Sub Menu Kelola Transaksi Konsumen")

# Fungsi utama
def main():
    os.system("cls")
    stok_bst = BST()  
    while True:
        menu_utama()
        pilihan = input("Masukkan Pilihan menu : ")

        if pilihan == "1":
            while True:
                menu_stok()
                sub_pilihan = input("Masukkan Pilihan Sub Menu : ")
                if sub_pilihan == "1.1":
                    input_stok(stok_bst)
                elif sub_pilihan == "1.2":
                    input_restok(stok_bst)
                elif sub_pilihan == "1.3":
                    menu_tampil(stok_bst)
                elif sub_pilihan == "0":
                    break
                else:
                    print("Pilihan Tidak Valid.")

        elif pilihan == "2":
            while True:
                menu_transaksi()
                sub_pilihan = input("Masukkan Pilihan Sub Menu : ")
                if sub_pilihan == "2.1":
                    input_transaksi(stok_bst)
                elif sub_pilihan == "2.2":
                    data_transaksi()
                elif sub_pilihan == "2.3":
                    transaksi_subtotal()
                elif sub_pilihan == "0":
                    break
                else:
                    print('Pilihan Tidak Valid')

        elif pilihan == "0":
            os.system("cls")
            print("=".center(80, "="))
            print(" Terima Kasih Telah Menggunakan Program Ini ".center(80, "-"))
            print("=".center(80, "="))
            break
        else:
            print("Pilihan Tidak Valid.")
# Menjalankan program
if __name__ == "__main__":
    main()